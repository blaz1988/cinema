# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe Api::V1::MoviesController, type: :request do
  let(:user) { create(:user) }
  let(:movies) { create_list(:movie, 2) }
  let(:movie) { movies.first }
  let(:movies_json) {
    MovieSerializer.new(movies).serializable_hash.to_json
  }
  let(:movie_json) {
    MovieSerializer.new(movie).serializable_hash.to_json
  }

  before do
    create(:user_movie_rating, user: user, movie: movie, rating: 3)

    movies_json
    movie_json
  end

  describe 'when user is logged in' do
    before { sign_in(user) }

    context 'GET /index' do
      it 'renders a successful response' do
        get api_v1_movies_url, as: :json
        expect(response).to be_successful
        expect(response.body).to eq(movies_json)
      end
    end

    context 'GET /show' do
      it 'renders a successful response' do
        get api_v1_movie_url(movie), as: :json
        expect(response).to be_successful
        expect(response.body).to eq(movie_json)
      end
    end
  end

  describe 'when user is not logged in' do
    context 'GET /index' do
      it 'renders a successful response' do
        get api_v1_movies_url, as: :json
        expect(response).not_to be_successful
      end
    end

    context 'GET /show' do
      it 'renders a successful response' do
        get api_v1_movie_url(movie), as: :json
        expect(response).not_to be_successful
      end
    end
  end
end
